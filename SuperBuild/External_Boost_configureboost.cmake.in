# Set the important envirimental variables that auto-conf uses to
# configure, mostly these are passed from the CMake
# configuration. Others are just explicitly passed from the
# enviroment. If there is a problem with them in the future they can
# be addressed in CMake with the same structure.

set(ENV{CC} "@CMAKE_C_COMPILER@ @CMAKE_C_COMPILER_ARG1@")
set(ENV{CFLAGS} "@CMAKE_C_FLAGS@ @CMAKE_C_FLAGS_RELEASE@")
set(ENV{CXX} "@CMAKE_CXX_COMPILER@ @CMAKE_CXX_COMPILER_ARG1@")
set(ENV{CXXFLAGS} "@CMAKE_CXX_FLAGS@ @CMAKE_CXX_FLAGS_RELEASE@")
set(ENV{LDFLAGS} "@CMAKE_LINKER_FLAGS@ @CMAKE_LINKER_FLAGS_RELEASE@")

#
# Follow the boost suggestions
#

if(WIN32) # bootstrap.bat has no options, the options are given to ./b2 when BUILDING: see buildboost.cmake

  execute_process(COMMAND bootstrap.bat
    WORKING_DIRECTORY ${BUILD_DIR} RESULT_VARIABLE boostrap_result)

else(WIN32)

  execute_process(COMMAND ./bootstrap.sh --prefix=${BOOST_INSTALL_DIR}
    --without-libraries=atomic,chrono,context,date_time,exception,filesystem,graph,graph_parallel,iostreams,locale,math,mpi,program_options,python,random,regex,serialization,signals,test,timer,wave
## Needed for UKF system,thread,
    WORKING_DIRECTORY ${BUILD_DIR} RESULT_VARIABLE boostrap_result)
### NOTE:  --with-libraries= is purposefull left blank to avoid building
###        any of the unnecessary boost libraries.  ANTS only needs
###        the header-only components of boost!

endif(WIN32)

return(${bootstrap_result})
