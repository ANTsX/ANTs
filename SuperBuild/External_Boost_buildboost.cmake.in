# Set the important envirimental variables that auto-conf uses to
# configure, mostly these are passed from the CMake
# configuration. Others are just explicitly passed from the
# enviroment. If there is a problem with them in the future they can
# be addressed in CMake with the same structure.

set(ENV{CC} "@CMAKE_C_COMPILER@ @CMAKE_C_COMPILER_ARG1@")
set(ENV{CFLAGS} "@CMAKE_C_FLAGS@ @CMAKE_C_FLAGS_RELEASE@")
set(ENV{CXX} "@CMAKE_CXX_COMPILER@ @CMAKE_CXX_COMPILER_ARG1@")
set(ENV{CXXFLAGS} "@CMAKE_CXX_FLAGS@ @CMAKE_CXX_FLAGS_RELEASE@")
set(ENV{LDFLAGS} "@CMAKE_LINKER_FLAGS@ @CMAKE_LINKER_FLAGS_RELEASE@")

#
# Follow the boost suggestions
#

if(WIN32)

  execute_process(COMMAND ./b2 install --prefix=${BOOST_INSTALL_DIR}
    --without-atomic --without-chrono --without-context --without-date_time --without-exception --without-filesystem --without-graph --without-graph_parallel --without-iostreams --without-locale --without-math --without-mpi --without-program_options --without-python --without-random --without-regex --without-serialization --without-signals
    --without-test --without-timer --without-wave
# Needed for UKF  --without-system --without-thread
    WORKING_DIRECTORY ${BUILD_DIR} RESULT_VARIABLE build_result)

else(WIN32)
if(CMAKE_COMPILER_IS_CLANGXX)
  execute_process(COMMAND ./b2 toolset=clang cxxflags="-std=c++11 -stdlib=libc++" linkflags=-stdlib=libc++
    WORKING_DIRECTORY ${BUILD_DIR} RESULT_VARIABLE build_result)
else()
  execute_process(COMMAND ./b2 install
    WORKING_DIRECTORY ${BUILD_DIR} RESULT_VARIABLE build_result)
endif()

endif(WIN32)

return(${build_result})
